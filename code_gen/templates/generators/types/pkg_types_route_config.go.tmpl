{{- $class := .Class -}}
{{- $lower := toLower $class -}}
// Copyright 2016, 2026 The Authors. All rights reserved.
// Use of this source code is governed by a license that can
// be found in the LICENSE file.
/*
 * Parts of this file were auto generated. Edit only those parts of
 * the code inside of 'EXISTING_CODE' tags.
 */

package {{$lower}}

import (
	"github.com/TrueBlocks/trueblocks-explorer/pkg/types"
)

// GetConfig returns the ViewConfig for the {{$class}} view
func (c *{{$class}}Collection) GetConfig() (*types.ViewConfig, error) {
	facets := map[string]types.FacetConfig{
		{{- range .Facets}}
		{{- $rowActionsBe := .RowActionsBe .Name -}}
		{{- $headerActionsBe := .HeaderActionsBe .Name}}
		"{{toLower .Name}}": {
			Name:          "{{toHeader .DisplayName}}",
			Store:         "{{toLower .StoreName}}",
			{{- if .ViewType }}
						ViewType:      "{{.ViewType}}",
			{{- end }}
			DividerBefore: {{contains .Attributes "dividerBefore"}},
			Fields:        get{{toProper .StoreName}}Fields(),
			Actions:       []string{ {{if $rowActionsBe}}{{$rowActionsBe}}{{end}} },
			HeaderActions: []string{ {{if $headerActionsBe}}{{$headerActionsBe}}{{end}} },
			RendererTypes: "{{.Renderer}}",
			{{- if .PanelChart }}
				PanelChartConfig:   get{{.Name}}PanelConfig(),
			{{- end}}
			{{- if .FacetChart }}
				FacetChartConfig:   get{{.Name}}FacetConfig(),
			{{- end}}
			{{- if .NavigateTo }}
				RowAction:   {{.NavigateTo}},
			{{- end}}
		},
		{{- end}}
	}

	cfg := &types.ViewConfig{
		ViewName:   "{{$lower}}",
		Facets:     facets,
		FacetOrder: []string{ {{- range .Facets}}{{printf "%q" (toLower .Name)}}, {{- end}}},
		Actions:    map[string]types.ActionConfig{
		{{- range .AllActions }}
			{{.}}
		{{- end }}
		},
	}

	types.DeriveFacets(cfg)
	types.SortFields(cfg)
	types.SetMenuOrder(cfg)
	return cfg, nil
}
{{- range .Stores }}

func get{{firstUpper (toLower .Name)}}Fields() []types.FieldConfig {
	ret := []types.FieldConfig{
		{{- range .Members }}
			{{- if not (or (contains .Type "[]") (contains .Type "*")) }}
				{{- $type := .GetFormatter }}
				{Section: "{{ cond (eq .Section "") "General" .Section }}", Key: "{{.Name}}"{{if $type}}, Type: "{{$type}}"{{end}}{{if .IsNoTable}}, NoTable: true{{end}}{{if .IsSortable}}, Sortable: true{{end}}},
			{{- end }}
		{{- end }}
		{{- if .HasActions $.Facets}}
		{Section: "", Key: "actions", Type: "actions", NoDetail: true},
		{{- end }}
	}
	types.NormalizeFields(&ret)
	return ret
}
{{- end }}

// EXISTING_CODE
// EXISTING_CODE
