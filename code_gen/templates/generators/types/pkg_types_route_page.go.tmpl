{{- $class := .Class -}}
{{- $lower := toLower $class -}}
{{- $isDresses := eq $class "Dresses" -}}
// Copyright 2016, 2026 The Authors. All rights reserved.
// Use of this source code is governed by a license that can
// be found in the LICENSE file.
/*
 * Parts of this file were auto generated. Edit only those parts of
 * the code inside of 'EXISTING_CODE' tags.
 */

package {{toLower .Class}}

// EXISTING_CODE
// EXISTING_CODE

type {{.Class}}Page struct {
	Facet         types.DataFacet      `json:"facet"`
	{{range .Stores}}{{.Name}} []{{toSingular .Name}} `json:"{{toLower .Name}}"`
{{end -}}
	TotalItems    int                  `json:"totalItems"`
	ExpectedTotal int                  `json:"expectedTotal"`
	State         types.StoreState      `json:"state"`
	// EXISTING_CODE
	// EXISTING_CODE
}

func (p *{{.Class}}Page) GetFacet() types.DataFacet {
	return p.Facet
}

func (p *{{.Class}}Page) GetTotalItems() int {
	return p.TotalItems
}

func (p *{{.Class}}Page) GetExpectedTotal() int {
	return p.ExpectedTotal
}

func (p *{{.Class}}Page) GetState() types.StoreState {
	return p.State
}

func (c *{{.Class}}Collection) GetPage(
	payload *types.Payload,
	first, pageSize int,
	sortSpec sdk.SortSpec,
	filter string,
) (types.Page, error) {
	filter = strings.ToLower(filter)
	dataFacet := payload.DataFacet
	page := &{{.Class}}Page{
		Facet: dataFacet,
	}
	_ = preprocessPage(c, page, payload, first, pageSize, sortSpec)
	{{- if $isDresses }}
	if page.Facet == DressesGenerator || page.Facet == DressesGallery {
		first = 0
		pageSize = 1_000_000_000
	}
	{{- end}}

	if c.shouldSummarize(payload) {
		return c.getSummaryPage(dataFacet, payload.ActivePeriod, first, pageSize, sortSpec, filter)
	}

	switch dataFacet {
	{{range .Facets}}
	{{$sing := toSingular .Name -}}
	case {{$class}}{{.Name}}:
		facet := c.{{toLower .Name}}Facet
		var filterFunc func(*{{toSingular .StoreName}}) bool
		if filter != "" {
			filterFunc = func(item *{{toSingular .StoreName}}) bool {
				return c.matches{{$sing}}Filter(item, filter)
			}
		}
		sortFunc := func(items []{{toSingular .StoreName}}, sort sdk.SortSpec) error {
			return {{.StoreSource}}.Sort{{.StoreName}}(items, sort)
		}
		if result, err := facet.GetPage(first, pageSize, filterFunc, sortSpec, sortFunc); err != nil {
			return nil, types.NewStoreError("{{toLower $class}}", dataFacet, "GetPage", err)
		} else {
			{{- if .NeedsCalcs}}
			props := &sdk.ModelProps{
				Chain:   payload.ActiveChain,
				Format:  "json",
				Verbose: true,
				ExtraOpts: map[string]any{
					"ether": true,
				},
			}
			for i := range result.Items {
				if err := result.Items[i].EnsureCalcs(props, nil); err != nil {
					logging.LogBEError(fmt.Sprintf("Failed to calculate fields for item %d: %v", i, err))
				}
			}
			{{- end}}
			page.{{.StoreName}} = result.Items
			page.TotalItems = result.TotalItems
			page.State = result.State
		}
		page.ExpectedTotal = facet.ExpectedCount()
{{- end}}
	default:
		return nil, types.NewValidationError("{{toLower .Class}}", dataFacet, "GetPage",
			fmt.Errorf("[GetPage] unsupported dataFacet: %v", dataFacet))
	}

	return page, nil
}

// shouldSummarize returns true if the current facet can be simmarized by period
func (c *{{.Class}}Collection) shouldSummarize(payload *types.Payload) bool {
	if !payload.ShouldSummarize() {
		return false
	}
	// EXISTING_CODE
	// EXISTING_CODE
	return false
}

// getSummaryPage returns paginated summary data for a given period
func (c *{{.Class}}Collection) getSummaryPage(
	dataFacet types.DataFacet,
	period types.Period,
	first, pageSize int,
	sortSpec sdk.SortSpec,
	filter string,
) (types.Page, error) {
	// TODO: Use these
	_ = first
	_ = pageSize
	_ = sortSpec
	_ = filter
	// CRITICAL: Ensure underlying raw data is loaded before generating summaries
	// For summary periods, we need the blockly (raw) data to be loaded first
	c.FetchByFacet(dataFacet)
	if err := c.generateSummariesForPeriod(dataFacet, period); err != nil {
		return nil, types.NewStoreError("exports", dataFacet, "getSummaryPage", err)
	}

	page := &{{.Class}}Page{
		Facet: dataFacet,
	}

	switch dataFacet {
	// EXISTING_CODE
	// EXISTING_CODE
	default:
		return nil, types.NewValidationError("{{$lower}}", dataFacet, "getSummaryPage",
			fmt.Errorf("[getSummaryPage] unsupported dataFacet: %v %v", dataFacet, page.Facet))
	}
}

// generateSummariesForPeriod ensures summaries are generated for the given period
func (c *{{.Class}}Collection) generateSummariesForPeriod(dataFacet types.DataFacet, period types.Period) error {
	// TODO: Use this
	_ = period
	switch dataFacet {
	// EXISTING_CODE
	// EXISTING_CODE
	default:
		return fmt.Errorf("[generateSummariesForPeriod] unsupported dataFacet for summary: %v", dataFacet)
	}
}

func preprocessPage(
	c *{{.Class}}Collection,
	page *{{.Class}}Page,
	payload *types.Payload,
	first, pageSize int,
	sortSpec sdk.SortSpec,
) error {
	_ = page
	_ = c
	_ = payload
	_ = first
	_ = pageSize
	_ = sortSpec
	// EXISTING_CODE
	// EXISTING_CODE
	return nil
}

// EXISTING_CODE
// EXISTING_CODE
