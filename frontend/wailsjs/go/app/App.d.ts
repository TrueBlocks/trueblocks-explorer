// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT
import {types} from '../models';
import {crud} from '../models';
import {project} from '../models';
import {base} from '../models';
import {menu} from '../models';
import {sdk} from '../models';
import {abis} from '../models';
import {skin} from '../models';
import {preferences} from '../models';
import {utils} from '../models';
import {chunks} from '../models';
import {comparitoor} from '../models';
import {context} from '../models';
import {contracts} from '../models';
import {dresses} from '../models';
import {exports} from '../models';
import {monitors} from '../models';
import {names} from '../models';
import {status} from '../models';
import {app} from '../models';

export function AbisCrud(arg1:types.Payload,arg2:crud.Operation,arg3:any):Promise<void>;

export function AddAddressToProject(arg1:string):Promise<void>;

export function AddAddressesToProject(arg1:string):Promise<void>;

export function CancelAllFetches():Promise<number>;

export function CancelFetch(arg1:types.DataFacet):Promise<void>;

export function ChangeImageStorageLocation(arg1:string):Promise<void>;

export function ClearActiveProject():Promise<void>;

export function ClearFilterState(arg1:project.ViewStateKey):Promise<void>;

export function CloseProject(arg1:string):Promise<void>;

export function ConvertToAddress(arg1:string):Promise<base.Address|boolean>;

export function DalleDressCrud(arg1:types.Payload,arg2:crud.Operation,arg3:any):Promise<void>;

export function DeleteCustomSkin(arg1:string):Promise<void>;

export function Encode(arg1:types.Function,arg2:Array<any>):Promise<string>;

export function ExportData(arg1:types.Payload):Promise<void>;

export function ExportSkin(arg1:string):Promise<string>;

export function FileNew(arg1:menu.CallbackData):Promise<void>;

export function FileOpen(arg1:menu.CallbackData):Promise<void>;

export function FileQuit(arg1:menu.CallbackData):Promise<void>;

export function FileSave(arg1:menu.CallbackData):Promise<void>;

export function FileSaveAs(arg1:menu.CallbackData):Promise<void>;

export function FromTemplate(arg1:types.Payload,arg2:string):Promise<string>;

export function GetAbisConfig(arg1:types.Payload):Promise<types.ViewConfig>;

export function GetAbisPage(arg1:types.Payload,arg2:number,arg3:number,arg4:sdk.SortSpec,arg5:string):Promise<abis.AbisPage>;

export function GetAbisSummary(arg1:types.Payload):Promise<types.Summary>;

export function GetActiveProject():Promise<project.Project>;

export function GetActiveProjectData():Promise<types.ProjectPayload>;

export function GetActiveProjectPath():Promise<string>;

export function GetAllSkins():Promise<Record<string, skin.Skin>>;

export function GetAppId():Promise<preferences.Id>;

export function GetAppPreferences():Promise<preferences.AppPreferences>;

export function GetAvailableSkins():Promise<Array<skin.SkinMetadata>>;

export function GetChainList():Promise<utils.ChainList>;

export function GetChunksConfig(arg1:types.Payload):Promise<types.ViewConfig>;

export function GetChunksPage(arg1:types.Payload,arg2:number,arg3:number,arg4:sdk.SortSpec,arg5:string):Promise<chunks.ChunksPage>;

export function GetChunksSummary(arg1:types.Payload):Promise<types.Summary>;

export function GetComparitoorConfig(arg1:types.Payload):Promise<types.ViewConfig>;

export function GetComparitoorPage(arg1:types.Payload,arg2:number,arg3:number,arg4:sdk.SortSpec,arg5:string):Promise<comparitoor.ComparitoorPage>;

export function GetComparitoorSummary(arg1:types.Payload):Promise<types.Summary>;

export function GetContext():Promise<context.Context>;

export function GetContractsConfig(arg1:types.Payload):Promise<types.ViewConfig>;

export function GetContractsPage(arg1:types.Payload,arg2:number,arg3:number,arg4:sdk.SortSpec,arg5:string):Promise<contracts.ContractsPage>;

export function GetContractsSummary(arg1:types.Payload):Promise<types.Summary>;

export function GetDalleAudioURL(arg1:types.Payload,arg2:string):Promise<string>;

export function GetDalleDressPage(arg1:types.Payload,arg2:number,arg3:number,arg4:sdk.SortSpec,arg5:string):Promise<dresses.DalleDressPage>;

export function GetDalleDressSummary(arg1:types.Payload):Promise<types.Summary>;

export function GetDebugCollapsed():Promise<boolean>;

export function GetDefaultAppPreferences():Promise<preferences.AppPreferences>;

export function GetDressesConfig(arg1:types.Payload):Promise<types.ViewConfig>;

export function GetExportsConfig(arg1:types.Payload):Promise<types.ViewConfig>;

export function GetExportsPage(arg1:types.Payload,arg2:number,arg3:number,arg4:sdk.SortSpec,arg5:string):Promise<exports.ExportsPage>;

export function GetExportsSummary(arg1:types.Payload):Promise<types.Summary>;

export function GetFilename():Promise<project.Project>;

export function GetFilterState(arg1:project.ViewStateKey):Promise<project.FilterState>;

export function GetFormat():Promise<string>;

export function GetImageURL(arg1:string):Promise<string>;

export function GetKhedraControlURL():Promise<string>;

export function GetLanguage():Promise<string>;

export function GetLastFacet(arg1:string):Promise<string>;

export function GetLastView():Promise<string>;

export function GetMarkdown(arg1:string,arg2:string,arg3:string):Promise<string>;

export function GetMonitorsConfig(arg1:types.Payload):Promise<types.ViewConfig>;

export function GetMonitorsPage(arg1:types.Payload,arg2:number,arg3:number,arg4:sdk.SortSpec,arg5:string):Promise<monitors.MonitorsPage>;

export function GetMonitorsSummary(arg1:types.Payload):Promise<types.Summary>;

export function GetNamesConfig(arg1:types.Payload):Promise<types.ViewConfig>;

export function GetNamesPage(arg1:types.Payload,arg2:number,arg3:number,arg4:sdk.SortSpec,arg5:string):Promise<names.NamesPage>;

export function GetNamesSummary(arg1:types.Payload):Promise<types.Summary>;

export function GetNodeStatus(arg1:string):Promise<types.MetaData>;

export function GetOpenProjects():Promise<Array<Record<string, any>>>;

export function GetOrgPreferences():Promise<preferences.OrgPreferences>;

export function GetProjectAddress():Promise<base.Address>;

export function GetProjectViewState(arg1:string):Promise<Record<string, project.FilterState>>;

export function GetRegisteredViews():Promise<Array<string>>;

export function GetSkin():Promise<string>;

export function GetSkinByName(arg1:string):Promise<skin.Skin>;

export function GetStatusConfig(arg1:types.Payload):Promise<types.ViewConfig>;

export function GetStatusPage(arg1:types.Payload,arg2:number,arg3:number,arg4:sdk.SortSpec,arg5:string):Promise<status.StatusPage>;

export function GetStatusSummary(arg1:types.Payload):Promise<types.Summary>;

export function GetTheme():Promise<string>;

export function GetUserInfoStatus():Promise<app.UserInfoStatus>;

export function GetUserPreferences():Promise<preferences.UserPreferences>;

export function GetWizardReturn():Promise<string>;

export function HasActiveProject():Promise<boolean>;

export function ImportSkin(arg1:string):Promise<void>;

export function IsDialogSilenced(arg1:string):Promise<boolean>;

export function IsDisabled(arg1:string):Promise<boolean>;

export function IsInitialized():Promise<boolean>;

export function IsReady():Promise<boolean>;

export function LogFrontend(arg1:string):Promise<void>;

export function MonitorsClean(arg1:types.Payload,arg2:Array<string>):Promise<void>;

export function MonitorsCrud(arg1:types.Payload,arg2:crud.Operation,arg3:any):Promise<void>;

export function NameFromAddress(arg1:string):Promise<types.Name|boolean>;

export function NamesCrud(arg1:types.Payload,arg2:crud.Operation,arg3:any):Promise<void>;

export function NewProject(arg1:string,arg2:string):Promise<void>;

export function OpenProjectFile(arg1:string):Promise<void>;

export function ReadToMe(arg1:types.Payload,arg2:string):Promise<string>;

export function RegisterCollection(arg1:types.Collection):Promise<void>;

export function Reload(arg1:types.Payload):Promise<void>;

export function ReloadAbis(arg1:types.Payload):Promise<void>;

export function ReloadChunks(arg1:types.Payload):Promise<void>;

export function ReloadComparitoor(arg1:types.Payload):Promise<void>;

export function ReloadContracts(arg1:types.Payload):Promise<void>;

export function ReloadDalleDress(arg1:types.Payload):Promise<void>;

export function ReloadExports(arg1:types.Payload):Promise<void>;

export function ReloadMonitors(arg1:types.Payload):Promise<void>;

export function ReloadNames(arg1:types.Payload):Promise<void>;

export function ReloadSkins():Promise<void>;

export function ReloadStatus(arg1:types.Payload):Promise<void>;

export function RemoveAddressFromProject(arg1:string):Promise<void>;

export function ResetStore(arg1:string):Promise<void>;

export function RestoreProjectContext(arg1:string):Promise<void>;

export function SaveBounds(arg1:number,arg2:number,arg3:number,arg4:number):Promise<void>;

export function SaveProject():Promise<void>;

export function SetActiveAddress(arg1:string):Promise<void>;

export function SetActiveChain(arg1:string):Promise<void>;

export function SetActiveContract(arg1:string):Promise<void>;

export function SetActivePeriod(arg1:string):Promise<void>;

export function SetActiveProjectPath(arg1:string):Promise<void>;

export function SetAppPreferences(arg1:preferences.AppPreferences):Promise<void>;

export function SetChain(arg1:preferences.Chain):Promise<void>;

export function SetChromeCollapsed(arg1:boolean):Promise<void>;

export function SetDebugCollapsed(arg1:boolean):Promise<void>;

export function SetFilterState(arg1:project.ViewStateKey,arg2:project.FilterState):Promise<void>;

export function SetFormat(arg1:string):Promise<void>;

export function SetHelpCollapsed(arg1:boolean):Promise<void>;

export function SetInitialized(arg1:boolean):Promise<void>;

export function SetLanguage(arg1:string):Promise<void>;

export function SetLastFacet(arg1:string,arg2:string):Promise<string>;

export function SetLastView(arg1:string):Promise<string>;

export function SetMenuCollapsed(arg1:boolean):Promise<void>;

export function SetOrgPreferences(arg1:preferences.OrgPreferences):Promise<void>;

export function SetProjectAddress(arg1:base.Address):Promise<void>;

export function SetProjectViewState(arg1:string,arg2:Record<string, project.FilterState>):Promise<void>;

export function SetSkin(arg1:string):Promise<void>;

export function SetTheme(arg1:string):Promise<void>;

export function SetUserInfo(arg1:string,arg2:string):Promise<void>;

export function SetUserPreferences(arg1:preferences.UserPreferences):Promise<void>;

export function SetViewAndFacet(arg1:string,arg2:string):Promise<string>;

export function SilenceDialog(arg1:string):Promise<void>;

export function Speak(arg1:types.Payload,arg2:string):Promise<string>;

export function SwitchToProject(arg1:string):Promise<void>;

export function ValidateActiveProject():Promise<boolean>;
